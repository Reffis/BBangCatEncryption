/// **노가다..**
fn k() -> [(&'static str, &'static str); 91] {
    [
        ("a", "빵"),
        ("b", "뽷"),
        ("c", "삫"),
        ("d", "뺗"),
        ("e", "빽"),
        ("f", "뻭"),
        ("g", "뺶"),
        ("h", "뻏"),
        ("i", "켓"),
        ("j", "캣"),
        ("k", "컛"),
        ("l", "콋"),
        ("m", "켔"),
        ("n", "콌"),
        ("o", "컜"),
        ("p", "뽕"),
        ("q", "뿡"),
        ("r", "뿅"),
        ("s", "뺭"),
        ("t", "뺑"),
        ("u", "쁑"),
        ("v", "뺭"),
        ("w", "삉"),
        ("x", "쀵"),
        ("y", "뽱"),
        ("z", "뼝"),

        ("A", "뿾"),
        ("B", "쀇"),
        ("C", "뽺"),
        ("D", "뾹"),
        ("E", "뾂"),
        ("F", "쁅"),
        ("G", "뾾"),
        ("H", "뿢"),
        ("I", "쁥"),
        ("J", "뾹"),
        ("K", "쀇"),
        ("L", "뾳"),
        ("M", "뼿"),
        ("N", "뾎"),
        ("O", "뽬"),
        ("P", "쾫"),
        ("Q", "켥"),
        ("R", "캛"),
        ("S", "컎"),
        ("T", "켦"),
        ("U", "캺"),
        ("V", "켎"),
        ("W", "쾛"),
        ("X", "컱"),
        ("Y", "콇"),
        ("Z", "켈"),

        ("0", "펪"),
        ("1", "퍭"),
        ("2", "풞"),
        ("3", "픯"),
        ("4", "푌"),
        ("5", "퍭"),
        ("6", "픮"),
        ("7", "풝"),
        ("8", "퐾"),
        ("9", "풾"),

        ("`", "롶"),
        ("~", "렑"),
        ("!", "렾"),
        ("@", "륇"),
        ("#", "뢣"),
        ("$", "럺"),
        ("%", "렊"),
        ("^", "륦"),
        ("&", "룞"),
        ("*", "룗"),
        ("*", "랛"),
        ("(", "랂"),
        (")", "럋"),
        ("-", "랞"),
        ("_", "뢿"),
        ("=", "륩"),
        ("+", "륪"),
        ("|", "롂"),
        ("\\", "릖"),
        ("<", "릗"),
        (">", "릔"),
        ("/", "룒"),
        ("?", "뀨"),
        ("\"", "렵"),
        ("'", "렡"),
        (";", "뢗"),
        (":", "랟"),
        (",", "랰"),
        (".", "럙"),


    ]
}

pub fn get_key_to_bce(x: &str) -> Option<&str> {
    for i in k().iter() {
        if i.0 == x {
            return Option::Some(i.1);
        }
    }
    None
}

pub fn get_key_to_str(x: &str) -> Option<&str> {
    for i in k().iter() {
        if i.1 == x {
            return Option::Some(i.0);
        }
    }
    None
}
